#NEW2
Linux Sysadmin Protip

You can quickly test whether boxcar notifications are working with nagios by generating a failed service or host with iptables. Choose a host or a service that nagios is monitoring and use iptables to block outbound connections.

For example, if nagios was monitoring HTTP on web-server-1.example.com block all outbound packets from the monitoring server to web-server-1.exmaple.com on port 80.
# iptables -I OUTPUT -d web-server-1.example.com -p tcp --dport 80 -j REJECT

Log into the nagios web interface and Re-schedule the next check of this service for this particular service. Delete the iptables rule once you’ve finished testing.
# iptables -D OUTPUT -d web-server-1.example.com -p tcp --dport 80 -j REJECT



puppet agent notes:

yum update -y

    Install and start ntp

yum install ntp
chkconfig ntpd on
service ntpd start

    Ensure client can resolve puppet server via 'puppet' and 'puppet.cloud.local' via your chosen name resolution method
    Add Puppet repository

?rpm -ivh http://yum.puppetlabs.com/puppetlabs-release-el-6.noarch.rpm

    ?Install Puppet agent software

yum install - y puppet

    On the client, test and Resolve Any Issues

puppet agent --test


    On Puppet server check certificate request and approve

puppet cert --list

    On the Puppet server, Sign certifcate request - copy and paste client name from list

puppet cert --sign <clientName>

Public key of client has been added to CA, enabling connectivity to the client from the server

    On the client, run test

puppet agent --test


    On Puppet server check certificate request and approve

puppet cert --list

    On the Puppet server, Sign certifcate request - copy and paste client name from list

puppet cert --sign <clientName>

Public key of client has been added to CA, enabling connectivity to the client from the server

    On the client, run test

puppet agent --test



Check Your Network Configuration

In an agent/master deployment, you must prepare your network for Puppet’s traffic.

    Firewalls: The puppet master server must allow incoming connections on port 8140, and agent nodes must be able to connect to the master on that port.
    Name resolution: Every node must have a unique hostname. Forward and reverse DNS must both be configured correctly. (Instructions for configuring DNS are beyond the scope of this guide. If your site lacks DNS, you must write an /etc/hosts file on each node.)
        Note: The default puppet master hostname is puppet. Your agent nodes can be ready sooner if this hostname resolves to your puppet master.

Check Timekeeping on Your Puppet Master Server

The puppet master server that will be acting as the certificate authority should have its system time set accurately. You should probably use NTP.


Drawing from the report, we've put together a quick list of the top five predictors of IT performance.
1. Peer-reviewed change approval process

When the technical team holds itself accountable for the quality of its code through peer review, performance increased. When external approval (e.g., change approval boards) was required in order to deploy to production, IT performance decreased.

Surprisingly, the use of external change approval processes had no impact on restore times, and had only a negligible effect on reducing failed changes. In other words, external change approval boards had a big negative impact on throughput, with negligible impact on stability.
2. Version control for all production artifacts

Version control provides a single source of truth for all changes. That means when a change fails, it’s easy to pinpoint the cause of failure and roll back to the last good state, reducing the time to recover.

Version control also promotes greater collaboration between teams. The benefits of version control shouldn’t be limited to application code; in fact, organizations using version control for both system and application configurations have higher IT performance.
3. Proactive monitoring

Teams that practice proactive monitoring are able to diagnose and solve problems faster, and have a high degree of accountability.

When failures are primarily reported by an external source, such as the network operations center — or worse, by customers — IT performance suffers.
4. High-trust organizational culture

One of the pillars of DevOps is culture, and we were pleased to prove what we already knew anecdotally: Culture matters. In fact, organizational culture was highly predictive of both IT performance and overall organizational performance. No one should be surprised to hear that high-trust cultures lead to greater performance, while bureaucratic and fear-based cultures are destructive to performance.
5. Win-win relationship between dev and ops

It’s not development versus operations, it’s dev plus ops. Getting devs and ops folks on the same side is half the battle. Once you've aligned on practices, tools and strategies, and adopted the cultural changes it takes to achieve collaboration, the goals of the business become shared goals, and IT performance wins.


Load these Modules:

mod_proxy.so
mod_proxy_ajp.so
mod_proxy_balancer.so


Note also the "route" setting which must match the names of the "jvmRoutes" in the Tomcat server.xml for each node. This in conjunction with the "stickysession" setting is key for a Tomcat cluster, as this configures the session management. It tells mod_proxy to look for the node's route in the given session cookie to determine which node that session is using. This allows all requests from a given client to go to the node which is holding the session state for the client. The ProxyPass line configures the actual URL from Apache to the load balanced cluster. You may want this to be "/" e.g. "ProxyPass /balancer://testcluster/" In our case we're just configuring the Tomcat /examples application for our test.



rewrite modules:

<Proxy balancer://testcluster stickysession=JSESSIONID>
BalancerMember ajp://127.0.0.1:8009 min=10 max=100 route=node1 loadfactor=1
BalancerMember ajp://127.0.0.1:8019 min=20 max=200 route=node2 loadfactor=1
</Proxy>

ProxyPass /examples balancer://testcluster/examples


Example -2

 ######################
 # ALFRESCO SHARE PROXY
 <Proxy balancer://app>
   BalancerMember ajp://localhost:8010/share route=tomcat1
   BalancerMember ajp://localhost:8011/share route=tomcat2
 </Proxy>
 ProxyRequests Off
 ProxyPassReverse /share balancer://app
 ProxyPass /share balancer://app stickysession=JSESSIONID|jsessionid
 ######################

Example -3

<VirtualHost *:80>
    ServerName ducklington.org
    ServerAlias www.ducklington.org

    ErrorLog /srv/www/ducklington.org/logs/error.log 
    CustomLog /srv/www/ducklington.org/logs/access.log combined

    <Proxy balancer://cluster>
        BalancerMember http://app1.ducklington.org
        BalancerMember http://app2.ducklington.org
        BalancerMember http://app3.ducklington.org
        BalancerMember http://app4.ducklington.org
        BalancerMember http://app5.ducklington.org
    </Proxy>

    ProxyPass / balancer://cluster/

    # ProxyPass / balancer://cluster/ lbmethod=byrequests
    # ProxyPass / balancer://cluster/ lbmethod=bytraffic
    # ProxyPass / balancer://cluster/ lbmethod=bybusyness
</VirtualHost>


Example -4 

Proxying a Domain to Lighttpd

We already have a site called “www.firstsite.org” running under Apache as a normal virtual host. We’ll use Apache to send requests for the site “www.secondsite.org” to lighttpd, which we’ve configured to run on port 8080 on localhost. Here’s the configuration file for “www.secondsite.org”:

/etc/apache2/sites-available/www.secondsite.org

   	

    <VirtualHost 74.207.231.112:80>
         ServerAdmin support@secondsite.org
         ServerName secondsite.org
         ServerAlias www.secondsite.org

         ProxyPass / http://localhost:8080/

         # Uncomment the line below if your site uses SSL.
         #SSLProxyEngine On
    </VirtualHost>

The ProxyPass directive tells Apache to forward all requests for this domain to a web server running on port 8080. If our target server was running on another VPS (as with a server that only answers on the backend private network), we could just specify that address instead




ProxyPass / balancer://balancer_cluster_name



Example - 5


<Proxy balancer://mycluster>
    BalancerMember http://192.168.1.50:80
    BalancerMember http://192.168.1.51:80
</Proxy>
ProxyPass /test balancer://mycluster
ProxyPassReverse /test balancer://mycluster



Header add Set-Cookie "ROUTEID=.%{BALANCER_WORKER_ROUTE}e; path=/" env=BALANCER_ROUTE_CHANGED
<Proxy balancer://mycluster>
    BalancerMember http://192.168.1.50:80 route=1
    BalancerMember http://192.168.1.51:80 route=2
    ProxySet stickysession=ROUTEID
</Proxy>
ProxyPass /test balancer://mycluster
ProxyPassReverse /test balancer://mycluster


ProxyPass /test balancer://mycluster stickysession=JSESSIONID|jsessionid scolonpathdelim=On
<Proxy balancer://mycluster>
    BalancerMember http://192.168.1.50:80 route=node1
    BalancerMember http://192.168.1.51:80 route=node2
</Proxy>


Sticky sessions

Header add Set-Cookie "BALANCEID=hej.%{BALANCER_WORKER_ROUTE}e; path=/;" env=BALANCER_ROUTE_CHANGED

<Proxy balancer://mycluster>
    BalancerMember http://tomcat sever1.ip:8080  route=AcZxv
    BalancerMember http://tomcat server2.ip:8080 route=AcXxv
    lbmethod=byrequests stickysession=BALANCEID
</Proxy>

In catalina.properties file


tcserver.node=AcZxv (tomcat 1st server)
tcserver.node=AcXxv (tomcat 2nd server)


Restrictions

# limit access to local area network
<Limit GET POST PUT>
 order deny,allow
 deny from all
 allow from 192.168.0.0/33
</Limit>
Secure Directories by IP Address and/or Domain ^

In the following example, all IP addresses are allowed access except for 12.345.67.890 and domain.com:

# allow all except those indicated here
<Limit GET POST PUT>
 order allow,deny
 allow from all
 deny from 12.345.67.890
 deny from .*domain\.com.*
</Limit>



Conversely, to enable directory browsing, use the following directive:

# enable directory browsing
Options All +Indexes

Likewise, this rule will prevent the server from listing directory contents:

# prevent folder listing
IndexIgnore *

And, finally, the IndexIgnore directive may be used to prevent the display of select file types:

# prevent display of select file types
IndexIgnore *.wmv *.mp4 *.avi *.etc



PHP CURL CHECK

<?php

// Script to test if the CURL extension is installed on this server

// Define function to test
function _is_curl_installed() {
    if  (in_array  ('curl', get_loaded_extensions())) {
        return true;
    }
    else {
        return false;
    }
}

// Ouput text to user based on test
if (_is_curl_installed()) {
  echo "cURL is <span style=\"color:blue\">installed</span> on this server";
} else {
  echo "cURL is NOT <span style=\"color:red\">installed</span> on this server";
}
?>



Subdomain to application1.



<VirtualHost *:80>
        ServerAdmin webmaster@localhost
        ServerName app1.example.com
        ProxyRequests Off
        ProxyPreserveHost On

        <Proxy *:80>
          Order deny,allow
          Allow from all
        </Proxy>
        ProxyPass / http://localhost:8080/app1
        ProxyPassReverse / http://localhost:8080/app1

        ProxyHTMLURLMap / /app1/

        <Location />
                Order allow,deny
                Allow from all
        </Location>
</VirtualHost>

4 - Restart apache2 service:


http://app1.example.com/some/beautiful/page

sudo service apache2 restart



<VirtualHost xxx.xxx.xxx.xxx:80>
     ServerAdmin email@email.com
     ServerName staging.domain.com

     ProxyPass /app1 http://localhost:8080/app1
     ProxyPassReverse /app1 http://localhost:8080/app1
</VirtualHost>


<VirtualHost xxx.xxx.xxx.xxx:80>
     ServerAdmin email@email.com
     ServerName staging.domain.com

     ProxyPass /app1 http://localhost:8080/app1
     ProxyPassReverse /app1 http://localhost:8080/app1

     ProxyPass /app2 http://localhost:8080/app2
     ProxyPassReverse /app2 http://localhost:8080/app2

     ProxyPass /app3 http://localhost:8080/app3
     ProxyPassReverse /app3 http://localhost:8080/app3
</VirtualHost>



http://www.webmasterworld.com/forum92/6079.htm



 Apache/mod_proxy (Serving static files)

     <VirtualHost *:80>

       ServerName app.somehost.com

       # Make sure that document root points to public dir of our application
       DocumentRoot /path/to/public

       # Don't proxy any request beginning with the keyword "/static".
       # So, for example, "/static/logo.gif" will be served directly by
       # Apache from the "/path/to/public/static/logo.gif file"
       # The ! (exclamation mark) keyword in ProxyPass means "don't"
       ProxyPass /static !

       # Another one for "favicon.ico", so that explorer and mozilla are happy
       ProxyPass /favicon.ico !

       # And now we send back to our application everyting else that does
       # not begin with "/static" or "/favicon.ico"
       ProxyPass / http://localhost:3000/
       ProxyPassReverse / http://localhost:3000/

     </VirtualHost>


ProxyRequests off
ProxyPass /team !
ProxyPass  /   http://www.yahoo.com
ProxyPassReverse  /  http://www.yahoo.com

RewriteEngine on
   RewriteLog "/var/log/rewrite.log"
   RewriteLogLevel 9







